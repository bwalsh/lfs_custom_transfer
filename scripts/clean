#!/usr/bin/env python3

import sys, os, hashlib
from pathlib import Path

STORAGE_DIR = Path("/tmp/lfs_storage")  # Change to your actual remote store path
STORAGE_DIR.mkdir(exist_ok=True)
LOG_FILE = STORAGE_DIR / "clean.log"

def log_debug(msg):
    with open(LOG_FILE, 'a') as f:
        print(f"DEBUG: {msg}", file=f)

def is_lfs_pointer(content):
    return content.startswith(b"version https://git-lfs.github.com/spec")

def process_content(content):
    # Process the content here (e.g., compress, encrypt)
    processed_content = content  # Replace with your actual processing

    # Create LFS pointer file
    hash_object = hashlib.sha256(processed_content)
    oid = hash_object.hexdigest()
    size = len(processed_content)
    pointer = f"version https://git-lfs.github.com/spec/v1\noid sha256:{oid}\nsize {size}\n".encode('UTF-8')

    # Store the processed content in a temporary file (or your desired storage)
    lfs_dir = ".git/lfs/objects"  # Use os.path.join for robustness
    os.makedirs(os.path.join(lfs_dir, oid[:2]), exist_ok=True)
    with open(os.path.join(lfs_dir, oid[:2], oid[2:]), 'wb') as f:
        f.write(processed_content)

    return pointer

def main():
    content = sys.stdin.buffer.read()

    if is_lfs_pointer(content):
        sys.stdout.buffer.write(content)
        log_debug("Content is a valid LFS pointer, passing through unchanged.")
    else:
        pointer = process_content(content)
        sys.stdout.buffer.write(pointer)
        log_debug("Processed content and created LFS pointer.")

if __name__ == "__main__":
    main()